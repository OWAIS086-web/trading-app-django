# Generated by Django 4.2.2 on 2023-06-21 12:06

import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('cities_light', '0011_alter_city_country_alter_city_region_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('username', models.CharField(blank=True, max_length=150, null=True, verbose_name='User Name')),
                ('email', models.EmailField(default='email@mydomain.cm', max_length=254, unique=True, verbose_name='Email')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active?')),
                ('is_approved', models.BooleanField(default=True, verbose_name='Is Approved?')),
                ('is_locked_out', models.BooleanField(default=False, verbose_name='Is Locked Out?')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Is Deleted?')),
                ('is_superuser', models.BooleanField(default=False, verbose_name='Is Super User?')),
                ('is_admin', models.BooleanField(default=False, verbose_name='Is Admin?')),
                ('is_staff', models.BooleanField(default=False, verbose_name='Is Staff?')),
                ('date_joined', models.DateTimeField(default=datetime.datetime(2023, 6, 21, 12, 5, 59, 552201, tzinfo=datetime.timezone.utc), verbose_name='Joining Date')),
                ('last_ipaddress', models.CharField(blank=True, max_length=30, null=True, verbose_name='Last IP Address')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='Last Login Date')),
                ('last_password_changed_date', models.DateTimeField(blank=True, null=True, verbose_name='Last Password Changed Date')),
                ('last_lockout_date', models.DateTimeField(blank=True, null=True, verbose_name='Last Lockout Date')),
                ('last_activity_date', models.DateTimeField(blank=True, null=True, verbose_name='Last Activity Date')),
                ('failed_password_attempt_count', models.IntegerField(default=0, verbose_name='Failed Password Attempt Count')),
                ('terms_of_services', models.BooleanField(default=True, verbose_name='Terms Of Services')),
                ('created_on', models.DateTimeField(default=datetime.datetime(2023, 6, 21, 12, 5, 59, 552201, tzinfo=datetime.timezone.utc), editable=False, verbose_name='Created On')),
                ('updated_on', models.DateTimeField(default=datetime.datetime(2023, 6, 21, 12, 5, 59, 552201, tzinfo=datetime.timezone.utc), editable=False, verbose_name='Updated On')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_users', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_users', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': 'List of all Users',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display_name', models.CharField(blank=True, max_length=254, null=True, verbose_name='User Display Name')),
                ('prefix', models.CharField(default='prefix', max_length=10, verbose_name='Prefix')),
                ('first_name', models.CharField(default='first name', max_length=100, verbose_name='First Name')),
                ('middle_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Middle Name')),
                ('last_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Last Name')),
                ('biography', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Biography')),
                ('profile_pic', models.ImageField(blank=True, default='profile.png', null=True, upload_to='')),
                ('telephone', models.CharField(blank=True, max_length=20, null=True, validators=[django.core.validators.RegexValidator(message="Telephone must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')], verbose_name='Telephone')),
                ('cell', models.CharField(blank=True, max_length=20, null=True, validators=[django.core.validators.RegexValidator(message="Cell must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')], verbose_name='Cell')),
                ('fax', models.CharField(blank=True, max_length=20, null=True, validators=[django.core.validators.RegexValidator(message="Fax must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')], verbose_name='Fax')),
                ('website', models.CharField(blank=True, max_length=254, null=True, verbose_name='Website')),
                ('twitter', models.CharField(blank=True, max_length=254, null=True, verbose_name='Twitter')),
                ('skype', models.CharField(blank=True, max_length=254, null=True, verbose_name='Skype')),
                ('linkedin', models.CharField(blank=True, max_length=254, null=True, verbose_name='LinkedIn')),
                ('facebook', models.CharField(blank=True, max_length=254, null=True, verbose_name='Facebook')),
                ('instagram', models.CharField(blank=True, max_length=254, null=True, verbose_name='Instagram')),
                ('unit', models.CharField(max_length=10, null=True, verbose_name='Unit')),
                ('street', models.CharField(max_length=50, null=True, verbose_name='Street')),
                ('postal_code', models.CharField(max_length=25, null=True, verbose_name='Postal Code')),
                ('created_on', models.DateTimeField(default=datetime.datetime(2023, 6, 21, 12, 5, 59, 555189, tzinfo=datetime.timezone.utc), editable=False, verbose_name='Created On')),
                ('updated_on', models.DateTimeField(default=datetime.datetime(2023, 6, 21, 12, 5, 59, 555189, tzinfo=datetime.timezone.utc), editable=False, verbose_name='Updated On')),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cities_light.city', verbose_name='City')),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cities_light.country', verbose_name='Country')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_user_profile', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cities_light.region', verbose_name='State')),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated_user_profile', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
